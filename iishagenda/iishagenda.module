<?php

/**
 * Implementation of hook_init().
 */

function iishagenda_init()
{
    global $user;

    if (in_array('administrator', $user->roles) && !variable_get('iishagenda_admin')) {
        drupal_set_message(t('Please define an <a href="/admin/iishagenda">event administrator</a>.'), 'error', false);
    }

   switch(arg(0)){
       case "catering":
           drupal_add_js(drupal_get_path('module', 'iishagenda') .'/js/iishagenda.js');
           break;
       case "node":
           drupal_add_js(drupal_get_path('module', 'iishagenda') .'/js/iishagenda_eventform.js');
           break;
       case "calendar":
           drupal_add_css(drupal_get_path('module', 'iishagenda') .'/css/calendar.css',array('weight' => 999));
           break;
   }

    drupal_add_css(drupal_get_path('module', 'iishagenda') .'/css/agenda.css',array('weight' => 998));
}


function iishagenda_custom_theme() {
    if(arg(0)=="node"){
        $node = node_load(arg(1));
        if($node && $node->type == "event"){
            return "iisg";
        }else{
            return "seven";
        }
    }
}



/**
 * Implements hook_menu_alter.
 */
function iishagenda_menu_alter(&$items) {
    $items['node/add/event']['theme callback'] = 'iishagenda_custom_get_default_theme';
}

function iishagenda_custom_get_default_theme() {
    return variable_get('theme_default', '0');
}

/**
 * Implementation of hook_menu().
 */
function iishagenda_menu() {

    $items['admin/iishagenda'] = array(
        'title' => t('Events'),
        'description' => '',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('admin_settings'),
        'access callback' => 'user_is_logged_in',
        'type' => MENU_NORMAL_ITEM,
        'file' => 'iishagenda.admin.inc',
    );

    return $items;
}

/**
* Implementation of hook_form_alter().
*/
function iishagenda_form_alter(&$form, $form_state, $form_id) {


    if($form_id == 'event_node_form'){

        // strip form elements
        unset($form['actions']['preview']);

        /*
        // optional refresh on people num update
        $form['field_people'][LANGUAGE_NONE][0]['value']['#ajax'] = array(
                'event' => 'blur',
                'callback' => '_iishagenda_rebuild_rooms',
                'wrapper' => 'rooms-replace',
                '#weight' => 2,
        );
        */

        $form['check'] = array(
            '#type'  => 'button',
            '#name'  => 'check-avb',
            '#value' => t('Controleer beschikbaarheid'),
            '#weight' => 10,
            '#ajax'  => array(
                'callback' => '_iishagenda_rebuild_rooms',
                'wrapper' => 'rooms-replace',
                'method'   => 'replace',
                'effect'   => 'fade'
            )
        );

        $form['field_event_room']['#weight'] = '11';
        $form['field_note']['#weight'] = '12';
        $form['#group_children']['check'] = 'group_accomodation';

        $options = _iishagenda_get_available_rooms($form,$form_state);

        if(!array_key_exists('values', $form_state)){
            $msg = t("");
        }else if(count($options)==0){
            $msg = t('Sorry, geen zalen beschikbaar. Pas aub de data aan.');
        }else{
            $msg = t('');
        }
        $form['field_event_room'][LANGUAGE_NONE]['#prefix'] =  '<div id="rooms-replace">';
        $form['field_event_room'][LANGUAGE_NONE]['#suffix'] =  $msg.'</div>';
        $form['field_event_room'][LANGUAGE_NONE]['#options'] = $options;

        return $form;

    }
}


/**
 * @return array
 *   Renderable array
 */
function _iishagenda_rebuild_rooms($form, $form_state) {
    $form_state["rebuild"] = true;
    return $form['field_event_room'];
}


/**
 *
 * @param string $key
 *   This will determine which set of options is returned.
 *
 * @return array
 *   Dropdown options
 */
function _iishagenda_get_available_rooms($form, $form_state) {

    // defining variables
    $num        = issetor($form_state['values']['field_people'][LANGUAGE_NONE][0]['value'],0);
    $nid        = issetor($form['nid']['#value'],null);

    if($form['nid']['#value'] == null){
        $startdate  = issetor($form_state['values']['field_event_date'][LANGUAGE_NONE][0]['value'],'2000-01-01T00:00:00');
        $enddate    = issetor($form_state['values']['field_event_date'][LANGUAGE_NONE][0]['value2'],'3001-01-01T00:00:00');
    }else{
        $startdate  = issetor($form_state['values']['field_event_date'][LANGUAGE_NONE][0]['value'],$form['#node']->field_event_date[LANGUAGE_NONE][0]['value']);
        $enddate    = issetor($form_state['values']['field_event_date'][LANGUAGE_NONE][0]['value2'],$form['#node']->field_event_date[LANGUAGE_NONE][0]['value2']);
    }

   // dpm($startdate." - ".$enddate);

    // check which events times intersects with startdate
    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'event')
        ->fieldCondition('field_event_date', 'value', $startdate, '>=')
        ->fieldCondition('field_event_date', 'value', $enddate, '<=')
        ->fieldCondition('field_canceled', 'value', 1, '!=');

    $results = $query->execute();

    // check which events times intersects with enddate
    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'event')
        ->fieldCondition('field_event_date', 'value2', $startdate, '>=')
        ->fieldCondition('field_event_date', 'value2', $enddate, '<=')
        ->fieldCondition('field_canceled', 'value', 1, '!=');

    $results2 = $query->execute();

    // check which events times covers in time total
    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'event')
        ->fieldCondition('field_event_date', 'value', $startdate, '<=')
        ->fieldCondition('field_event_date', 'value2', $enddate, '>=')
        ->fieldCondition('field_canceled', 'value', 1, '!=');

    $results3 = $query->execute();

    //merging data
    $events1 = count($results)>0 ? $results['node'] : array();
    $events2 = count($results2)>0 ? $results2['node'] : array();
    $events3 = count($results3)>0 ? $results3['node'] : array();
    $events = $events1 +$events2+$events3;//  merge and removes duplicates

    //dpm($events);

    //remove current node to keep current choices
    if($nid !== null){
        unset($events[$nid]);
    }

    $events = node_load_multiple(array_keys($events));
    $booked_rooms = array();

    // loop through events to get booked rooms
    foreach ($events as $event) {
        $rooms = field_get_items('node', $event, 'field_event_room');
        if(is_array($rooms)){
            foreach ($rooms as $room) {
                $booked_rooms[] = $room["nid"];
            }
        }
    }

    // get all rooms
    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'room')
            ->propertyCondition('status', 1);
    $results = $query->execute();

    $options = array();

    // remove booked rooms form all rooms
    foreach ($booked_rooms as $booked_room) {
        unset($results['node'][$booked_room]);
    }

    if (isset($results['node'])) {
        $nodes = node_load_multiple(array_keys($results['node']));

        foreach ($nodes as $node) {

            // capacity check
            $capacity = field_get_items('node', $node, 'field_capacity');
            $capacity_num = $capacity[0]['value'];
            $warning = "";
            if($capacity_num < $num){
               // $warning = "- Let op! Deze zaal is in standaardopstelling te klein als enige ruimte voor het aantal personen.";
            }else{
                $warning = "";
            }

            //capacity note display
            $capacity_note = field_get_items('node', $node, 'field_capacity_note');
            $capacity_note = $capacity_note[0]['value'];
            if($capacity_note){
                $capacity_note = " - ".$capacity_note;
            }else{
                $capacity_note = "";
            }

            $options[$node->nid] = $node->title." - Max. ".$capacity_num." plaatsen" .$capacity_note." ".$warning;
        }
    }

    return $options;
}


function issetor(&$var, $default = false) {
    return isset($var) ? $var : $default;
}


/**
 * Implementation of hook_node_insert().
 */
function iishagenda_node_insert($node){

    if($node->type =='event' && _check_admin()){

        $email = variable_get('iishagenda_admin');
        $module = 'iishagenda';
        $key = 'key';
        $language = language_default();
        $params = array();
        $from = NULL;
        $send = FALSE;
        $message = drupal_mail($module, $key, $email, $language, $params, $from, $send);

        $message['subject'] = "New event registration: ".$node->title;
        $message['body'] = array();
        $message['body'][] = "Hallo,";
        $message['body'][] = "Er is een nieuw evenement geregistreerd.";
        $message['body'][] = "";

        // Retrieve the responsible implementation for this message.
        $system = drupal_mail_system($module, $key);

        // Format the message body.
        $message = $system->format($message);

        // Send e-mail.
        $message['result'] = $system->mail($message);

        drupal_mail('iishagenda','notice',$email,$language,$params,NULL,true);

        if($message['result']){
            drupal_set_message(t('Het secretariaat is op de hoogte gesteld.'));
        }else{
            drupal_set_message(t('Het secretariaat is niet op de hoogte gesteld vanwege een fout, neem aub contact op met de beheerder.'),'error');
        }
    }
}


function iishagenda_mail($key, &$message, $params) {

    switch($key) {
        case 'notice':
            $message['subject'] = t('Notification from !site');
            $message['body'][] = t("Dear !username\n\nThere is new content available on the site.");
            break;
    }
}

/**
 * checks if admin is defined and exists
 */
function _check_admin(){
    if(variable_get('iishagenda_admin')){
      return true;

    }else{
        drupal_set_message(t('No event administrator defined, contact webmaster please.'),'error');
        return false;
    }
}


/**
 * Implementation of hook_node_presave().
 */
function iishagenda_node_presave($node)
{
    global $user;

    // only mail owner if current user is not the owner
    if($user->uid !== $node->uid){
        $old_node = node_load($node->vid);

        $current_approved = $old_node->field_approved[LANGUAGE_NONE][0]['value'];
        $new_approved = $node->field_approved[LANGUAGE_NONE][0]['value'];

        if($current_approved !== $new_approved && $new_approved==1){
            _notify_event_owner($node);
        }
    }
}


function _notify_event_owner($node){
    $user = user_load($node->uid);
    $email = $user->mail;
    $module = 'iishagenda';
    $key = 'key';
    $language = language_default();
    $params = array();
    $from = NULL;
    $send = FALSE;
    $message = drupal_mail($module, $key, $email, $language, $params, $from, $send);

    $message['subject'] = "Your event is approved ".$node->title;
    $message['body'] = array();
    $message['body'][] = "Hi";
    $message['body'][] = "Your event is succesfully accepted by the event admin.";
    $message['body'][] = "";

    // Retrieve the responsible implementation for this message.
    $system = drupal_mail_system($module, $key);

    // Format the message body.
    $message = $system->format($message);

    // Send e-mail.
    $message['result'] = $system->mail($message);

    if($message['result']){
        drupal_set_message(t('The event owner is notified.'));
    }else{
        drupal_set_message(t('The event owner is NOT notified. Please contact webmaster.'),'error');
    }
}


